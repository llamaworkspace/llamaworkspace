name: Tag and Push to hub on Release

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAGS=$(git tag)
          if [ -z "$TAGS" ]; then
            echo "No tags found."
            echo "LATEST_TAG=" >> $GITHUB_ENV
          else
            LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          fi

      - name: Compare versions and determine to build or not
        id: compare_versions
        run: |
          if [ -z "${{ env.LATEST_TAG }}" ]; then
            echo "No tags found. Setting RUN_BUILD to true."
            echo "RUN_BUILD=true" >> $GITHUB_ENV
          else
            LATEST_VERSION=${{ env.LATEST_TAG }}
            # Remove the 'v' prefix if it exists
            if [[ "$LATEST_VERSION" == v* ]]; then
              LATEST_VERSION=${LATEST_VERSION:1}
            fi
            if [ "$(printf '%s\n' "${{ env.VERSION }}" "$LATEST_VERSION" | sort -V | head -n1)" != "${{ env.VERSION }}" ]; then
              echo "Current version ${{ env.VERSION }} is higher than latest tag $LATEST_VERSION. Setting RUN_BUILD to true."
              echo "RUN_BUILD=true" >> $GITHUB_ENV
            else
              echo "Current version ${{ env.VERSION }} is not higher than latest tag $LATEST_VERSION. Skipping build."
              echo "RUN_BUILD=false" >> $GITHUB_ENV
            fi
          fi

      - name: Check if Docker image exists locally
        id: check_image_exists_local
        run: |
          IMAGE_EXISTS_LOCAL=$(docker images -q ${{ secrets.DOCKER_USERNAME }}/llamaworkspace:${{ env.VERSION }} | wc -l)
          if [ "$IMAGE_EXISTS_LOCAL" -gt 0 ]; then
            echo "IMAGE_EXISTS_LOCAL=true" >> $GITHUB_ENV
          else
            echo "IMAGE_EXISTS_LOCAL=false" >> $GITHUB_ENV
          fi

      - name: Check if Docker image exists in Docker Hub
        id: check_image_exists_in_dockerhub
        run: |
          IMAGE_EXISTS_IN_DOCKERHUB=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/llamaworkspace/tags/${{ env.VERSION }})
          if [ "$IMAGE_EXISTS_IN_DOCKERHUB" -eq 200 ]; then
            echo "IMAGE_EXISTS_IN_DOCKERHUB=true" >> $GITHUB_ENV
          else
            echo "IMAGE_EXISTS_IN_DOCKERHUB=false" >> $GITHUB_ENV
          fi

      # - name: Stop if version is not higher or image already exists
      #   if: env.RUN_BUILD == 'false' || env.IMAGE_EXISTS_IN_DOCKERHUB == 'true'
      #   run: |
      #     if [ "${{ env.RUN_BUILD }}" == "false" ]; then
      #       echo "Action terminates here.."
      #     else
      #       echo "Image already exists in Docker Hub. Skipping build."
      #     fi

      - name: Set up Docker Buildx
        if: env.RUN_BUILD == 'true' && env.IMAGE_EXISTS_IN_DOCKERHUB == 'false'
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        if: env.RUN_BUILD == 'true' && env.IMAGE_EXISTS_IN_DOCKERHUB == 'false'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          file: ./infra/Dockerfile.demo
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/llamaworkspace:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/llamaworkspace:latest
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        if: env.IMAGE_EXISTS_IN_DOCKERHUB == 'false'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        if: env.IMAGE_EXISTS_IN_DOCKERHUB == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'

        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./infra/Dockerfile.demo
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/llamaworkspace:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/llamaworkspace:latest
          platforms: linux/amd64,linux/arm64

      - name: Create GitHub tag
        if: env.IMAGE_EXISTS_LOCAL == 'false' && env.IMAGE_EXISTS_IN_DOCKERHUB == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: create_tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"
