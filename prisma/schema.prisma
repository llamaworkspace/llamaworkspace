generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model User {
    id                   String              @id @default(cuid())
    name                 String?
    username             String?             @unique
    email                String?             @unique
    emailVerified        DateTime?
    image                String?
    defaultModel         String?
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    accounts             Account[]
    apps                 App[]
    sessions             Session[]
    workspaces           UsersOnWorkspaces[]
    authoredChats        Chat[]
    workspaceInvitesSent WorkspaceInvite[]
    appsMeta             AppsOnUsers[]
    sharedTargets        ShareTarget[]
    sharingTargets       ShareTarget[]       @relation("sharingUser")
}

model Workspace {
    id                    String              @id @default(cuid())
    name                  String
    onboardingCompletedAt DateTime?
    defaultModel          String?
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt
    users                 UsersOnWorkspaces[]
    apps                  App[]
    workspaceInvites      WorkspaceInvite[]
    aiProvider            AiProvider[]
    assets                Asset[]
}

model UsersOnWorkspaces {
    id          String    @id @default(cuid())
    userId      String
    workspaceId String
    role        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([userId, workspaceId])
}

model WorkspaceInvite {
    id           String        @id @default(cuid())
    email        String
    token        String
    source       String        @default("direct")
    invitedById  String
    invitedBy    User          @relation(fields: [invitedById], references: [id], onDelete: Cascade)
    workspaceId  String
    workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    shareTargets ShareTarget[]

    @@unique([email, workspaceId])
    @@index([token])
    @@index([email])
}

model App {
    id                String             @id @default(cuid())
    title             String?
    emoji             String?
    userId            String
    workspaceId       String
    isDefault         Boolean            @default(false)
    isDemo            Boolean            @default(false)
    engineType        String
    markAsDeletedAt   DateTime?
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    chats             Chat[]
    appConfigVersions AppConfigVersion[]
    shares            Share[]
    usersMeta         AppsOnUsers[]
    assetsOnApps      AssetsOnApps[]
    keyValues         KeyValue[]
}

model AppsOnUsers {
    id            String    @id @default(cuid())
    userId        String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    appId         String
    app           App       @relation(fields: [appId], references: [id], onDelete: Cascade)
    position      Int?
    pinnedAt      DateTime?
    lastVisitedAt DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@unique([userId, appId])
}

model Asset {
    id                 String           @id @default(cuid())
    workspaceId        String
    uploadStatus       String
    originalName       String
    extension          String
    path               String
    markedAsDeletedAt  DateTime?
    remoteDeletedAt    DateTime?
    contentsAsMarkdown String?
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    workspace          Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    assetsOnApps       AssetsOnApps[]
    assetEmbeddings    AssetEmbedding[]
}

model AssetEmbedding {
    id      String               @id @default(cuid())
    assetId String
    model   String
    asset   Asset                @relation(fields: [assetId], references: [id], onDelete: Cascade)
    items   AssetEmbeddingItem[]
}

model AssetEmbeddingItem {
    id               String                      @id @default(cuid())
    assetEmbeddingId String
    contents         String
    embedding        Unsupported("vector(1024)")
    assetEmbedding   AssetEmbedding              @relation(fields: [assetEmbeddingId], references: [id], onDelete: Cascade)
}

model AssetsOnApps {
    id              String    @id @default(cuid())
    assetId         String
    appId           String
    asset           Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
    app             App       @relation(fields: [appId], references: [id], onDelete: Cascade)
    status          String
    externalId      String?
    failureMessage  String?
    markAsDeletedAt DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@unique([assetId, appId])
}

model Share {
    id           String        @id @default(cuid())
    appId        String        @unique
    scope        String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    app          App           @relation(fields: [appId], references: [id], onDelete: Cascade)
    shareTargets ShareTarget[]
}

model ShareTarget {
    id                String           @id @default(cuid())
    shareId           String
    sharerId          String
    userId            String?
    workspaceInviteId String?
    accessLevel       String
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    share             Share            @relation(fields: [shareId], references: [id], onDelete: Cascade)
    sharer            User             @relation("sharingUser", fields: [sharerId], references: [id], onDelete: Cascade)
    user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceInvite   WorkspaceInvite? @relation(fields: [workspaceInviteId], references: [id], onDelete: Cascade)

    // @@unique([shareId, userId])
    // @@unique([shareId, workspaceInviteId])
    @@index(workspaceInviteId)
}

model Chat {
    id                 String            @id @default(cuid())
    appId              String
    title              String?
    app                App               @relation(fields: [appId], references: [id], onDelete: Cascade)
    appConfigVersionId String?
    appConfigVersion   AppConfigVersion? @relation(fields: [appConfigVersionId], references: [id], onDelete: Cascade)
    authorId           String?
    author             User?             @relation(fields: [authorId], references: [id])
    messages           Message[]
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    chatRuns           ChatRun[]
}

model Message {
    id                 String            @id @default(cuid())
    chatId             String?
    chat               Chat?             @relation(fields: [chatId], references: [id], onDelete: Cascade)
    appConfigVersionId String?
    appConfigVersion   AppConfigVersion? @relation(fields: [appConfigVersionId], references: [id], onDelete: Cascade)
    message            String?
    author             String
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    chatRunMessage     ChatRunMessage[]
}

model AppConfigVersion {
    id               String    @id @default(cuid())
    appId            String
    app              App       @relation(fields: [appId], references: [id], onDelete: Cascade)
    description      String?
    model            String
    preprocessAssets Boolean   @default(false)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    chats            Chat[]
    messages         Message[]
}

model ChatRun {
    id                            String           @id @default(cuid())
    chatId                        String
    chat                          Chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
    requestTokens                 Int?
    responseTokens                Int?
    requestTokensCostInNanoCents  Int?
    responseTokensCostInNanoCents Int?
    createdAt                     DateTime         @default(now())
    updatedAt                     DateTime         @updatedAt
    chatRunMessages               ChatRunMessage[]
}

model ChatRunMessage {
    id        String  @id @default(cuid())
    chatRunId String
    chatRun   ChatRun @relation(fields: [chatRunId], references: [id], onDelete: Cascade)
    messageId String
    message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model AiProvider {
    id          String               @id @default(cuid())
    slug        String
    name        String
    workspaceId String
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    keyValues   AiProviderKeyValue[]
    aiModels    AiProviderModel[]
    workspace   Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([workspaceId, slug])
}

model AiProviderKeyValue {
    id           String     @id @default(cuid())
    aiProviderId String
    key          String
    value        String /// @encrypted
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    aiProvider   AiProvider @relation(fields: [aiProviderId], references: [id], onDelete: Cascade)

    @@unique([aiProviderId, key])
}

model AiProviderModel {
    id           String     @id @default(cuid())
    aiProviderId String
    slug         String
    isEnabled    Boolean    @default(false)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    aiProvider   AiProvider @relation(fields: [aiProviderId], references: [id], onDelete: Cascade)

    @@unique([aiProviderId, slug])
}

model KeyValue {
    id        String   @id @default(cuid())
    key       String
    value     String
    type      String
    appId     String
    app       App      @relation(fields: [appId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
